<tool id="tag_pileup_frequency_output_stats" name="Tag pileup frequency output statistics" version="1.0.0">
    <description></description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <command>
        <![CDATA[
            #import time
            mkdir payloads &&
            #for $i, $tabular in enumerate($input_tabular):
                #set sense = $input_sense[$i]
                #set anti = $input_anti[$i]
                #set non_ready_states = ['new', 'queued', 'running', 'setting_metadata', 'upload']
                #while $sense.dataset.state in $non_ready_states:
                    time.sleep(60)
                #end while
                #while $anti.dataset.state in $non_ready_states:
                    time.sleep(60)
                #end while
                #while $tabular.dataset.state in $non_ready_states:
                    time.sleep(60)
                #end while
                #set history_id = $__app__.security.encode_id($tabular.history.id)
                #set history_name = $tabular.history.name
                #set job = $tabular.creating_job
                #set job_state = $job.state
                #if $job_state == 'error':
                    #set stderr = $job.stderr
                #else:
                    #set stderr = ''
                #end if
                #set tool_id = $job.tool_id
                #set tool_parameters = ""
                #for $p in $job.parameters:
                    #set tool_parameters = $tool_parameters + "__SeP__" + $p.name
                    #set tool_parameters = $tool_parameters + "__SeP__" + str($p.value)
                #end for
                #set tool_parameters = $tool_parameters + "__SeP__input2X__identifier____SeP__MOTIF" + str($i + 1)
                #set workflow_step = None
                #set pjaas = $job.post_job_actions
                #for pjaa in $pjaas:
                    #set pja = pjaa.post_job_action
                    #set workflow_step = $pja.workflow_step
                #end for
                python $__tool_directory__/tag_pileup_frequency_output_stats.py
                --input_sense "$sense"
                --input_sense_id "$__app__.security.encode_id($sense.id)"
                --input_sense_datatype "$sense.ext"
                --input_anti "$anti"
                --input_anti_id "$__app__.security.encode_id($anti.id)"
                --input_anti_datatype "$anti.ext"
                --input_tabular "$tabular"
                --input_tabular_id "$__app__.security.encode_id($tabular.id)"
                --input_tabular_datatype "$tabular.ext"
                --dbkey "$tabular.metadata.dbkey"
                --config_file $__tool_directory__/stats_config.ini
                --history_id "$history_id"
                --history_name "$history_name"
                --stats_tool_id "tag_pileup_frequency_output_stats"
                --stderr "$stderr"
                --tool_id "$tool_id"
                --tool_category "output_tagPileup"
                --tool_parameters "$tool_parameters"
                --user_email "$__user_email__"
                #if $workflow_step is not None:
                    --workflow_step_id "$__app__.security.encode_id($workflow_step.id)"
                #end if
                --output "payloads/payload_${i}.json" &&
            #end for
            echo DONE
        ]]>
    </command>
    <inputs>
        <param name="input_sense" type="data_collection" collection_type="list" format="tabular" label="sense input" />
        <param name="input_anti" type="data_collection" collection_type="list" format="tabular" label="anti input" />
        <param name="input_tabular" type="data_collection" collection_type="list" format="tabular" label="Tabular input" />
    </inputs>
    <outputs>
        <collection name="payloads" type="list" label="${tool.name} on ${on_string} ">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.json" format="txt" directory="payloads/" visible="false"/>
        </collection>
    </outputs>
    <tests>
    </tests>
    <help>
**What it does**

Gets the display URI for the HTML output of the **Tag pileup frequency** tool in the **CEGR Galaxy ChIP-exo**
pipeline.  A JSON dictionary containing the run, sample and this URI is sent via a POST to the PEGR REST
API where the information is stored to support the CEGR ChIP-exo statistics reports.
    </help>
    <expand macro="citations" />
</tool>
