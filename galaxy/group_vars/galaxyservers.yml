# Python 3 support
pip_virtualenv_command: /usr/bin/python3 -m virtualenv # usegalaxy_eu.certbot, usegalaxy_eu.tiaas2, galaxyproject.galaxy
certbot_virtualenv_package_name: python3-virtualenv    # usegalaxy_eu.certbot
pip_package: python3-pip                               # geerlingguy.pip

# PostgreSQL
postgresql_objects_users:
  - name: galaxy
postgresql_objects_databases:
  - name: galaxy
    owner: galaxy
# PostgreSQL Backups
postgresql_backup_dir: /data/backups
postgresql_backup_local_dir: "{{ '~postgres' | expanduser }}/backups"

# Galaxy
galaxy_create_user: true
galaxy_separate_privileges: true
galaxy_manage_paths: true
galaxy_layout: root-dir
galaxy_root: /srv/galaxy
galaxy_user: {name: galaxy, shell: /bin/bash}
galaxy_commit_id: release_22.05
galaxy_force_checkout: true
miniconda_prefix: "{{ galaxy_tool_dependency_dir }}/_conda"
miniconda_version: 4.7.12
miniconda_manage_dependencies: false

galaxy_config:
  galaxy:
    tool_data_table_config_path: /cvmfs/data.galaxyproject.org/byhand/location/tool_data_table_conf.xml,/cvmfs/data.galaxyproject.org/managed/location/tool_data_table_conf.xml
    brand: "EpiGenomics Core"
    admin_users: admin@example.org,jessica.hayward@cornell.edu
    serve_xss_vulnerable_mimetypes: true # To allow SVG files be shown in galaxy web interface
    database_connection: "postgresql:///galaxy?host=/var/run/postgresql"
    file_path: /data
    check_migrate_tools: false
    tool_data_path: "{{ galaxy_mutable_data_dir }}/tool-data"
    object_store_store_by: uuid
    id_secret: "{{ vault_id_secret }}"
    job_config_file: "{{ galaxy_config_dir }}/job_conf.yml"
    # Productionizing Galaxy
    # SQL Performance
    database_engine_option_server_side_cursors: true
    slow_query_log_threshold: 5
    enable_per_request_sql_debugging: true
    # File serving Performance
    nginx_x_accel_redirect_base: /_x_accel_redirect
    # Automation / Ease of Use / User-facing features
    watch_job_rules: 'auto'
    allow_path_paste: true
    enable_quotas: true
    allow_user_deletion: true
    show_welcome_with_login: true
    expose_user_name: true
    expose_dataset_path: true
    expose_potentially_sensitive_job_metrics: true
    # NFS workarounds
    retry_job_output_collection: 3
    # Debugging
    cleanup_job: onsuccess
    allow_user_impersonation: true
    # Tool security
    outputs_to_working_directory: true
    # TUS
    tus_upload_store: /data/tus
    # Add custom conda channel for scATAC-seq pipelines
    conda_ensure_channels: 'conda-forge,bioconda,defaults,austintwang'
  gravity:
    galaxy_root: "{{ galaxy_root }}/server"
    app_server: gunicorn
    gunicorn:
      # listening options
      bind: "unix:{{ galaxy_mutable_config_dir }}/gunicorn.sock"
      # performance options
      workers: 2
      # Other options that will be passed to gunicorn
      extra_args: '--forwarded-allow-ips="*"'
      preload: true
    celery:
      concurrency: 2
      loglevel: DEBUG
    handlers:
      handler:
        processes: 3
        pools:
          - job-handler
          - workflow-scheduler

# systemd
galaxy_manage_systemd: yes
galaxy_systemd_env: [DRMAA_LIBRARY_PATH="/usr/lib/slurm-drmaa/lib/libdrmaa.so.1"]

galaxy_config_templates:
  - src: templates/galaxy/config/job_conf.yml.j2
    dest: "{{ galaxy_config.galaxy.job_config_file }}"

galaxy_local_tools:
- scATAC_processing/scATAC_debarcode.xml
- scATAC_processing/scATAC_debarcode.py
- scATAC_processing/scATAC_barcode_err_correct.xml
- scATAC_processing/scATAC_barcode_err_correct.py
- scATAC_processing/scATAC_barcodefreq.xml
- scATAC_processing/scATAC_filterCellnumber.xml
- scATAC_processing/scATAC_filterCellnumber.py
- scATAC_processing/scATAC_summary.xml
- scATAC_processing/scATAC_summary.py
- scATAC_processing/scATAC_dedupCells.xml
- scATAC_processing/scATAC_dedupCells.py
- scATAC_processing/scATAC_convertToTSV.xml
- ArchR_tools/ArchR_generateArrowFile_TSV.xml
- ArchR_tools/ArchR_generateArrowFile.R
- ArchR_tools/ArchR_inferDoublet.xml
- ArchR_tools/ArchR_inferDoublet.R
- gatk4/gatk4_BaseRecalibrator.xml
- gatk4/gatk4_ApplyBQSR.xml
- gatk4/gatk4_HaplotypeCaller.xml
- gatk4/gatk4_GenomicsDBImport.xml
- gatk4/gatk4_ApplyVQSR.xml
- gatk4/gatk4_GenotypeGVCFs.xml
- gatk4/gatk4_VariantRecalibrator.xml
- ScriptManager/ScriptManager-v0.14.jar
- ScriptManager/scriptmanager_tagpileup.xml
- ScriptManager/scriptmanager_compositeimage.xml
- ScriptManager/macros.xml

# Certbot
certbot_auto_renew_hour: "{{ 23 |random(seed=inventory_hostname)  }}"
certbot_auto_renew_minute: "{{ 59 |random(seed=inventory_hostname)  }}"
certbot_auth_method: --webroot
certbot_install_method: virtualenv
certbot_auto_renew: yes
certbot_auto_renew_user: root
certbot_environment: production
#certbot_environment: staging
certbot_well_known_root: /srv/nginx/_well-known_root
certbot_share_key_users:
  - nginx
  - rabbitmq
certbot_post_renewal: |
    systemctl restart nginx || true
    systemctl restart rabbitmq-server || true
certbot_domains:
 - "{{ inventory_hostname }}"
certbot_agree_tos: --agree-tos

# NGINX
nginx_selinux_allow_local_connections: true
nginx_servers:
  - redirect-ssl
nginx_ssl_servers:
  - galaxy
nginx_enable_default_server: false
nginx_conf_http:
  client_max_body_size: 25g
  proxy_read_timeout: 600s
#  uwsgi_read_timeout: 180s
#  proxy_connect_timeout: 300s
#  proxy_read_timeout: 300s
#  client_body_timeout: 300s
#  client_header_timeout: 300s

  # gzip: "on" # This is enabled by default in Ubuntu, and the duplicate directive will cause a crash.
  gzip_proxied: "any"
  gzip_static: "on"   # The ngx_http_gzip_static_module module allows sending precompressed files with the ".gz" filename extension instead of regular files.
  gzip_vary: "on"
  gzip_min_length: 128
  gzip_comp_level: 6  # Tradeoff of better compression for slightly more CPU time.
  gzip_types: |
      text/plain
      text/css
      text/xml
      text/javascript
      application/javascript
      application/x-javascript
      application/json
      application/xml
      application/xml+rss
      application/xhtml+xml
      application/x-font-ttf
      application/x-font-opentype
      image/png
      image/svg+xml
      image/x-icon
nginx_ssl_role: usegalaxy_eu.certbot
nginx_conf_ssl_certificate: /etc/ssl/certs/fullchain.pem
nginx_conf_ssl_certificate_key: /etc/ssl/user/privkey-nginx.pem

# TUS
galaxy_tusd_port: 1080
tusd_instances:
  - name: main
    user: "{{ galaxy_user.name }}"
    group: "galaxy"
    args:
      - "-host=localhost"
      - "-port={{ galaxy_tusd_port }}"
      - "-upload-dir={{ galaxy_config.galaxy.tus_upload_store }}"
      - "-hooks-http=https://{{ inventory_hostname }}/api/upload/hooks"
      - "-hooks-http-forward-headers=X-Api-Key,Cookie"

# Slurm
slurm_roles: ['controller', 'exec'] # Which roles should the machine play? exec are execution hosts.
slurm_nodes:
- name: localhost # Name of our host
  CPUs: 14         # Here you would need to figure out how many cores your machine has. For this training we will use 2 but in real life, look at `htop` or similar.
slurm_config:
  SlurmdParameters: config_overrides   # Ignore errors if the host actually has cores != CPUs
  SelectType: select/cons_res
  SelectTypeParameters: CR_CPU_Memory  # Allocate individual cores/memory instead of entire node

# RabbitMQ
rabbitmq_users:
  - user: mqadmin
    password: "{{ rabbitmq_users_password.mqadmin }}"
    tags: administrator
    vhost: /
  - user: galaxy
    password: "{{ rabbitmq_users_password.galaxy }}"
    vhost: galaxy

rabbitmq_plugins:
  - rabbitmq_management

rabbitmq_config:
  listeners:
    tcp: none
  ssl_listeners:
    default: 5671
  ssl_options:
    cacertfile: /etc/ssl/certs/fullchain.pem
    certfile: /etc/ssl/certs/cert.pem
    keyfile: /etc/ssl/user/privkey-rabbitmq.pem
    verify: verify_peer
    fail_if_no_peer_cert: 'false'

rabbitmq_container:
  name: rabbit_hole
  image: rabbitmq:3.9.11
  hostname: "{{ inventory_hostname }}"
