# Galaxy
galaxy_create_user: true # False by default, as e.g. you might have a 'galaxy' user provided by LDAP or AD.
galaxy_separate_privileges: true # Best practices for security, configuration is owned by 'root' (or a different user) than the processes
galaxy_manage_paths: true # False by default as your administrator might e.g. have root_squash enabled on NFS. Here we can create the directories so it's fine.
galaxy_manage_cleanup: true
galaxy_layout: root-dir
galaxy_root: /cephfs/galaxy
galaxy_user: {name: "{{ galaxy_user_name }}", shell: /bin/bash}
galaxy_commit_id: release_23.1
galaxy_force_checkout: true
miniconda_prefix: "{{ galaxy_tool_dependency_dir }}/_conda"
miniconda_version: 23.9.0
miniconda_channels: ['conda-forge', 'defaults']

galaxy_job_config:
  runners:
    local_runner:
      load: galaxy.jobs.runners.local:LocalJobRunner
      workers: 4
    slurm_runner:
      load: galaxy.jobs.runners.slurm:SlurmJobRunner
      drmaa_library_path: /usr/lib/slurm-drmaa/lib/libdrmaa.so.1
    pulsar_psu_runner:
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      amqp_url: "pyamqp://galaxy_psu:{{ rabbitmq_users_password.psupulsar }}@localhost:5671/{{ rabbitmq_vhosts[0] }}?ssl=1"
      amqp_acknowledge: true
      amqp_ack_republish_time: 1200
      amqp_consumer_timeout: 2
      amqp_publish_retry: true
      amqp_publish_retry_max_retries: 60
      galaxy_url: "https://{{ inventory_hostname }}"
      manager: _default_
    pulsar_iu_runner:
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      amqp_url: "pyamqp://galaxy_iu:{{ rabbitmq_users_password.iupulsar }}@localhost:5671/{{ rabbitmq_vhosts[1] }}?ssl=1"
      amqp_acknowledge: true
      amqp_ack_republish_time: 1200
      amqp_consumer_timeout: 2
      amqp_publish_retry: true
      amqp_publish_retry_max_retries: 60
      galaxy_url: "https://{{ inventory_hostname }}"
      manager: _default_
  handling:
    assign: ['db-skip-locked']
  execution:
    default: tpv_dispatcher
    environments:
      local_env:
        runner: local_runner
      local_slurm:
        runner: slurm_runner
      tpv_dispatcher:
        runner: dynamic
        type: python
        function: map_tool_to_destination
        rules_module: tpv.rules
        tpv_config_files:
  #          - https://raw.githubusercontent.com/galaxyproject/tpv-shared-database/main/tools.yml
  #          - "{{ tpv_config_dir }}/tpv_rules_local.yml"
          - "{{ tpv_config_dir }}/environments.yml"
          - "{{ tpv_config_dir }}/tools.yml"
  resources:
    default: default
    groups:
      default: []
      testing: [cores, time]
  tools:
    - class: local # these special tools that aren't parameterized for remote execution - expression tools, upload, etc
      environment: local_slurm

galaxy_config:
  galaxy:
    # Branding
    brand: "EpiGenomics Core"
    # Main Configuration
    admin_users:
    - admin@example.org
    - jsc333@cornell.edu
    - owl8@cornell.edu
    database_connection: "postgresql:///{{ galaxy_db_name }}?host=/var/run/postgresql"
    file_path: /cephfs/galaxy_data/datasets
    job_working_directory: /cephfs/galaxy_data/jobs
    object_store_store_by: uuid
    id_secret: "{{ vault_id_secret }}"
    job_config: "{{ galaxy_job_config }}" # Use the variable we defined above
    job_resource_params_file: "{{ galaxy_config_dir }}/job_resource_params_conf.xml"
    # SQL Performance
    slow_query_log_threshold: 5
    enable_per_request_sql_debugging: true
    # File serving Performance
    nginx_x_accel_redirect_base: /_x_accel_redirect
    # Automation / Ease of Use / User-facing features
    watch_job_rules: 'auto'
    allow_path_paste: true
    enable_quotas: true
    allow_user_deletion: true
    show_welcome_with_login: true
    expose_user_name: true
    expose_dataset_path: true
    expose_potentially_sensitive_job_metrics: true
    # NFS workarounds
    retry_job_output_collection: 3
    # Debugging
    cleanup_job: onsuccess
    allow_user_impersonation: true
    # Tool security
    outputs_to_working_directory: true
    conda_ensure_channels: 'conda-forge,bioconda,defaults,austintwang'
    new_user_dataset_access_role_default_private: true # Make datasets private by default
    # TUS
    galaxy_infrastructure_url: "https://{{ inventory_hostname }}"
    tus_upload_store: "{{ galaxy_tus_upload_store }}"
    # CVMFS
    galaxy_data_manager_data_path: /storage/group/bfp2/default/00_pughlab/tool_data
    #tool_data_table_config_path: /cvmfs/data.galaxyproject.org/byhand/location/tool_data_table_conf.xml,/cvmfs/data.galaxyproject.org/managed/location/tool_data_table_conf.xml
  gravity:
    process_manager: systemd
    galaxy_root: "{{ galaxy_root }}/server"
    galaxy_user: "{{ galaxy_user_name }}"
    virtualenv: "{{ galaxy_venv_dir }}"
    gunicorn:
      # listening options
      bind: "unix:{{ galaxy_mutable_config_dir }}/gunicorn.sock"
      # performance options
      workers: 2
      # Other options that will be passed to gunicorn
      # This permits setting of 'secure' headers like REMOTE_USER (and friends)
      # https://docs.gunicorn.org/en/stable/settings.html#forwarded-allow-ips
      extra_args: '--forwarded-allow-ips="*"'
      # This lets Gunicorn start Galaxy completely before forking which is faster.
      # https://docs.gunicorn.org/en/stable/settings.html#preload-app
      preload: true
    celery:
      concurrency: 2
      loglevel: DEBUG
    tusd:
      enable: true
      tusd_path: /usr/local/sbin/tusd
      upload_dir: "{{ galaxy_tus_upload_store }}"
    handlers:
      handler:
        processes: 2
        pools:
          - job-handlers
          - workflow-schedulers

galaxy_job_config_file: "{{ galaxy_config_dir }}/galaxy.yml"
#galaxy_tpv_config_dir: "{{ galaxy_config_dir }}/tpv"

galaxy_local_tools:
  - scATAC_processing/scATAC_debarcode.xml
  - scATAC_processing/scATAC_debarcode.py
  - scATAC_processing/scATAC_barcode_err_correct.xml
  - scATAC_processing/scATAC_barcode_err_correct.py
  - scATAC_processing/scATAC_barcodefreq.xml
  - scATAC_processing/scATAC_filterCellnumber.xml
  - scATAC_processing/scATAC_filterCellnumber.py
  - scATAC_processing/scATAC_summary.xml
  - scATAC_processing/scATAC_summary.py
  - scATAC_processing/scATAC_dedupCells.xml
  - scATAC_processing/scATAC_dedupCells.py
  - scATAC_processing/scATAC_convertToTSV.xml
  - ArchR_tools/ArchR_generateArrowFile_TSV.xml
  - ArchR_tools/ArchR_generateArrowFile.R
  - ArchR_tools/ArchR_inferDoublet.xml
  - ArchR_tools/ArchR_inferDoublet.R
  - gatk4/gatk4_BaseRecalibrator.xml
  - gatk4/gatk4_ApplyBQSR.xml
  - gatk4/gatk4_HaplotypeCaller.xml
  - gatk4/gatk4_GenomicsDBImport.xml
  - gatk4/gatk4_ApplyVQSR.xml
  - gatk4/gatk4_GenotypeGVCFs.xml
  - gatk4/gatk4_VariantRecalibrator.xml
  - ScriptManager/ScriptManager-v0.14.jar
  - ScriptManager/scriptmanager_tagpileup.xml
  - ScriptManager/scriptmanager_compositeimage.xml
  - ScriptManager/macros.xml
  - testing.xml
  - PEGR/bam_to_scidx_output_stats.py
  - PEGR/bam_to_scidx_output_stats.xml
  - PEGR/bedtools_intersectbed_output_stats.py
  - PEGR/bedtools_intersectbed_output_stats.xml
  - PEGR/bwa_mem_output_stats_single.py
  - PEGR/bwa_mem_output_stats_single.xml
  - PEGR/chexmix_output_stats.py
  - PEGR/chexmix_output_stats.xml
  - PEGR/cwpair2_output_stats.py
  - PEGR/cwpair2_output_stats.xml
  - PEGR/extract_genomic_dna_output_stats.py
  - PEGR/extract_genomic_dna_output_stats.xml
  - PEGR/extract_genomic_dna_output_stats2.xml
  - PEGR/extract_genomic_dna_output_stats3.xml
  - PEGR/fasta_nucleotide_color_plot_output_stats.py
  - PEGR/fasta_nucleotide_color_plot_output_stats.xml
  - PEGR/fastqc_output_stats.py
  - PEGR/fastqc_output_stats.xml
  - PEGR/fastqc_output_stats2.xml
  - PEGR/galaxy_post_pegr.py
  - PEGR/galaxy_post_pegr.xml
  - PEGR/galaxy_post_pegr_util.py
  - PEGR/genetrack_output_stats.py
  - PEGR/genetrack_output_stats.xml
  - PEGR/input_dataset_output_stats.py
  - PEGR/input_dataset_r1_output_stats.xml
  - PEGR/input_dataset_r2_output_stats.xml
  - PEGR/macros.xml
  - PEGR/mark_duplicates_bam_output_stats.py
  - PEGR/mark_duplicates_bam_output_stats.xml
  - PEGR/meme_fimo_output_stats.py
  - PEGR/meme_fimo_output_stats.xml
  - PEGR/meme_meme_output_stats.py
  - PEGR/meme_meme_output_stats.xml
  - PEGR/pe_histogram_output_stats.py
  - PEGR/pe_histogram_output_stats.xml
  - PEGR/pegr_info_file.txt.sample
  - PEGR/repeatmasker_wrapper_output_stats.py
  - PEGR/repeatmasker_wrapper_output_stats.xml
  - PEGR/repeatmasker_wrapper_output_stats2.xml
  - PEGR/samtool_filter2_output_stats.py
  - PEGR/samtool_filter2_output_stats.xml
  - PEGR/stats_config.ini.sample
  - PEGR/stats_util.py
  - PEGR/tag_pileup_frequency_output_stats.py
  - PEGR/tag_pileup_frequency_output_stats.xml

galaxy_config_file_src_dir: files/galaxy/config
galaxy_config_files:
#  - src: "{{ galaxy_config_file_src_dir }}/tpv_rules_local.yml"
#    dest: "{{ tpv_mutable_dir }}/tpv_rules_local.yml"
  - src: "{{ galaxy_config_file_src_dir }}/tpv/environments.yml"
    dest: "{{ tpv_mutable_dir }}/environments.yml"
  - src: "{{ galaxy_config_file_src_dir }}/tpv/tools.yml"
    dest: "{{ tpv_mutable_dir }}/tools.yml"

galaxy_config_template_src_dir: templates/galaxy/config
galaxy_config_templates:
  - src: "{{ galaxy_config_template_src_dir }}/job_resource_params_conf.xml.j2"
    dest: "{{ galaxy_config.galaxy.job_resource_params_file }}"
  - src: "{{ galaxy_config_template_src_dir }}/local_tool_conf.xml"
    dest: "{{ galaxy_config_dir }}/local_tool_conf.xml"

galaxy_extra_dirs:
  - /cephfs/galaxy_data
  - "{{ galaxy_config_dir }}/{{ tpv_config_dir_name }}"

galaxy_extra_privsep_dirs:
  - "{{ tpv_mutable_dir }}"
tpv_privsep: true

# Certbot
certbot_auto_renew_hour: "{{ 23 |random(seed=inventory_hostname)  }}"
certbot_auto_renew_minute: "{{ 59 |random(seed=inventory_hostname)  }}"
certbot_auth_method: --webroot
certbot_install_method: virtualenv
certbot_auto_renew: yes
certbot_auto_renew_user: root
certbot_environment: production
#certbot_environment: staging
certbot_well_known_root: /srv/nginx/_well-known_root
certbot_share_key_users:
  - www-data
certbot_share_key_ids:
  - "999:999"
certbot_post_renewal: |
    systemctl restart nginx || true
    docker restart rabbit_hole || true
certbot_domains:
 - "{{ inventory_hostname }}"
certbot_agree_tos: --agree-tos

# NGINX
nginx_selinux_allow_local_connections: true
nginx_servers:
  - redirect-ssl
nginx_ssl_servers:
  - galaxy
nginx_enable_default_server: false
nginx_conf_http:
  client_max_body_size: 25g
  proxy_read_timeout: 600s
  # gzip: "on" # This is enabled by default in Ubuntu, and the duplicate directive will cause a crash.
  gzip_proxied: "any"
  gzip_static: "on"   # The ngx_http_gzip_static_module module allows sending precompressed files with the ".gz" filename extension instead of regular files.
  gzip_vary: "on"
  gzip_min_length: 128
  gzip_comp_level: 6  # Tradeoff of better compression for slightly more CPU time.
  gzip_types: |
      text/plain
      text/css
      text/xml
      text/javascript
      application/javascript
      application/x-javascript
      application/json
      application/xml
      application/xml+rss
      application/xhtml+xml
      application/x-font-ttf
      application/x-font-opentype
      image/png
      image/svg+xml
      image/x-icon
nginx_ssl_role: usegalaxy_eu.certbot
nginx_conf_ssl_certificate: /etc/ssl/certs/fullchain.pem
nginx_conf_ssl_certificate_key: /etc/ssl/user/privkey-www-data.pem

# Slurm
slurm_roles: ['controller', 'exec'] # Which roles should the machine play? exec are execution hosts.
slurm_nodes:
- name: localhost # Name of our host
  CPUs: 4         # Here you would need to figure out how many cores your machine has. For this training we will use 2 but in real life, look at `htop` or similar.
slurm_config:
  SlurmdParameters: config_overrides   # Ignore errors if the host actually has cores != CPUs
  SelectType: select/cons_res
  SelectTypeParameters: CR_CPU_Memory  # Allocate individual cores/memory instead of entire node

# RabbitMQ
rabbitmq_container:
  name: rabbit_hole
  image: rabbitmq:3.11-management
  hostname: "{{ inventory_hostname }}"

rabbitmq_plugins:
  - rabbitmq_management

rabbitmq_config:
  listeners:
    tcp: none
  ssl_listeners:
    default: 5671
  ssl_options:
    verify: verify_peer
    cacertfile: /etc/ssl/certs/fullchain.pem
    certfile: /etc/ssl/certs/cert.pem
    keyfile: /etc/ssl/user/privkey-999:999.pem
    fail_if_no_peer_cert: 'false'
  management_agent:
    disable_metrics_collector: "false"
  management:
    disable_stats: 'false'
  consumer_timeout: 21600000 # 6 hours in milliseconds

rabbitmq_vhosts:
  - /pulsar/galaxy_psu
  - /pulsar/galaxy_iu

# RabbitMQ
rabbitmq_users:
  - user: mqadmin
    password: "{{ rabbitmq_users_password.mqadmin }}"
    tags: administrator
    vhost: /
  - user: galaxy_psu
    password: "{{ rabbitmq_users_password.psupulsar }}"
    vhost: /pulsar/galaxy_psu
  - user: galaxy_iu
    password: "{{ rabbitmq_users_password.iupulsar }}"
    vhost: /pulsar/galaxy_iu

# TUS
#tusd_version: 1.10.0
galaxy_tusd_port: 1080
galaxy_tus_upload_store: /cephfs/galaxy_data/tus

# Singularity var
galaxy_job_conf_singularity_volumes:
  iu_pulsar:
    - "$tool_directory:ro"
    - "$working_directory:rw"
    - "$job_directory:rw"
    - "/cvmfs/data.galaxyproject.org:ro"
    - "/tmp:rw"
